@page "/"

@using ValheimCharacterForge.Classes
@using ValheimCharacterForge.Models
@using ValheimCharacterForge.Shared.Components
@using System.Linq
@using System.Text.RegularExpressions
@using ElectronNET.API
@using ElectronNET.API.Entities
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IToastService toastService
@inject CharacterSingeton CharService

<header>
    <div class="container-fluid p-3 text-center page-header">
        <h1>Valheim Character Forge</h1>
    </div>
</header>

@if (LoadedCharacters)
{
    //if our characters are loaded, display the list to select from
    <div class="col-lg" style="margin-bottom:20px;text-align:center">
        <div class="table-responsive" style="padding-right: 4px">
            <table class="table table-sm table-hover table-striped cam-table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Characters)
                    {
                        <tr>
                            <td>@item.Data.Name</td>
                            <td><button type="button" class="btn btn-primary" @onclick="(() => SelectCharacter(item))">Select</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
else if (CharacterSelected)
{
    <div class="form-group inner-center text-center">
        <button class="btn btn-success text-center" @onclick="(() => SaveChanges())">Save All Changes</button>
        <small class="form-text text-muted">WARNING: Backup save files BEFORE making changes.</small>
        <hr />
        <form>
            <div class="col-lg-10 inner-center">
                <div class="form-row">
                    <div class="col">
                        <div class="form-group text-left">
                            <label>Character Name</label>
                            <div class="input-group mb-lg-2">
                                <span class="form-control">@CharService.Character.Data.Name</span>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group text-left">
                            <label>Deaths</label>
                            <div class="input-group mb-lg-auto">
                                <span class="form-control">@CharService.Character.Data.Deaths</span>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group text-left">
                            <label>Time Since Death</label>
                            <div class="input-group mb-lg-auto">
                                <span class="form-control">@CharService.Character.Data.TimeSinceDeath</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg inner-center">
                <div>
                    <div class="text-center inner-center">
                        <label>Inventory Slots</label>
                        <div class="grid-container inner-center text-center">
                            @for (int i = 0; i < InventoryRows; i++)
                            {
                                for (int ii = 0; ii < InventoryColumns; ii++)
                                {
                                    var _pos = new Tuple<int, int>(ii, i);
                                    var _taken = CharService.Character.Data.Inventory.SingleOrDefault(a => a.Pos.Item1 == _pos.Item1 && a.Pos.Item2 == _pos.Item2);

                                    if (_taken is null)
                                    {
                                        <InventorySlotComponent IsEmpty="true" Position="(ii, i)"></InventorySlotComponent>
                                    }
                                    else
                                    {
                                        var name = Regex.Replace(_taken.Name, "(\\B[A-Z])", " $1");
                                        <InventorySlotComponent IsEmpty="false" ItemName="@name" Quantity="@_taken.Stack" Position="(ii, i)"></InventorySlotComponent>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </form>
        <hr />
        <hr />
        <br />
    </div>
}
else
{
    <div class="form-group inner-center text-center">
        <div class="inner-center text-center">
            <button type="button" class="btn btn-primary" @onclick="GetDirectory">Select Valheim Save Location</button>
            <small class="form-text text-muted">Select the location where the character files are stored for Valheim.</small>
            <small class="form-text text-muted">Example : C:\Users\{usernamehere}\AppData\LocalLow\IronGate\Valheim\characters</small>
        </div>
    </div>
}

<style>
    .control-section.multiline {
        margin-top: 20px;
    }

    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }

    .wrapper {
        width: 45%;
        margin-left: 200px;
    }

    .grid-container {
        display: grid;
        grid-template-columns: 120px 120px 120px 120px 120px 120px 120px 120px;
    }

    .apply-limit {
        margin-top: 10px;
    }

    .control-label {
        padding: 24px 0px 10px 0px;
        font-size: 12px;
    }

    .property {
        padding-left: 10px;
        padding-bottom: 20px;
        font-weight: 600;
        font-size: 15px;
    }
</style>

@code {
    private Character[] Characters;
    int InventoryColumns = 8;
    int InventoryRows = 4;

    string SelectedDirectory = "";

    private bool LoadedCharacters = false;
    private bool CharacterSelected = false;

    string debug = "None";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.Run(() => LoadPageDetails().ConfigureAwait(false));

        }
        catch (Exception ex)
        {
            toastService.ShowError("There was an error loading the page. Please try again momentarily.", "Error Loading Page");
        }
    }

    async Task LoadPageDetails()
    {
        try
        {
            if (CharService.Character is not null)
            {
                CharacterSelected = true;
            }
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            if (ex.InnerException != null)
            {
                toastService.ShowError("There was an error loading the page. Please try again momentarily.", "Error");
            }
            else
            {
                toastService.ShowError("There was an error loading the page. Please try again momentarily.", "Error");
            }
        }

    }

    //Get the Characters from the selected folder
    private async void GetDirectory()
    {
        try
        {
            var mainWindow = Electron.WindowManager.BrowserWindows.First();
            var options = new OpenDialogOptions
            {
                Properties = new OpenDialogProperty[] {
                        OpenDialogProperty.openDirectory,
                    }
            };

            var _temp = (await Electron.Dialog.ShowOpenDialogAsync(mainWindow, options));
            var _selectedDirectory = _temp?.FirstOrDefault();

            if (!string.IsNullOrWhiteSpace(_selectedDirectory))
            {

                String dir = _selectedDirectory;

                String[] fchFiles = System.IO.Directory.GetFiles(dir, "*.fch");
                if (fchFiles.Length == 0)
                {
                    toastService.ShowError("No character data files found.", "Error");
                    return;
                }

                // Create a Character class for each identified FCH file and read everything
                Characters = new Character[fchFiles.Length];
                for (int i = 0; i < fchFiles.Length; i++)
                {
                    byte[] fbytes = System.IO.File.ReadAllBytes(fchFiles[i]);
                    if (fbytes.Length == 0)
                    {
                        toastService.ShowError("Could not read file \"" + fchFiles[i] + "\".", "Error");
                        continue;
                    }

                    Characters[i] = new Character();
                    Characters[i].File = fchFiles[i];
                    Characters[i].Data = Parser.CharacterReadData(fbytes);
                    // TODO check if data is correct
                }

                LoadedCharacters = true;
                SelectedDirectory = _selectedDirectory;

                toastService.ShowSuccess("Character list was loaded successfully.", "List Loaded");

                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            if (ex.InnerException != null)
            {
                toastService.ShowError("There was an error loading the page. Please try again momentarily.", "Error");
            }
            else
            {
                toastService.ShowError("There was an error loading the page. Please try again momentarily.", "Error");
            }
        }

    }

    //Select the character from the table, and show the form
    private void SelectCharacter(Character character)
    {
        CharService.Character = character;

        CharacterSelected = true;
        LoadedCharacters = false;
        toastService.ShowSuccess(character.Data.Name + " selected.", "Character Selected");
        InvokeAsync(StateHasChanged);
    }

    //Save our changes
    private void SaveChanges()
    {
        CharService.WriteCustomization();
        toastService.ShowSuccess(CharService.Character.Data.Name + " was saved.", "Character Saved");
        InvokeAsync(StateHasChanged);
    }
}